AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy cluster and service in fargate

Parameters:
  ClusterName:
    Type: String 
    Default: secnet_challenge_cluster 
    Description: Name of the cluster

  ContainerName:
    Type: String 
    Default: secnet_challenge 
    Description: Name of the container 

  FamilyName:
    Type: String 
    Default: secnet_challenge_family
    Description: Name of the family 

  ImageRepo:
    Type: String 
    Default:
    Description: Docker registry for container

  LogGroupName:
    Type: String 
    Default: secnet_challenge 
    Description: Name of the log group 

  Protocol:
    Type: String 
    Default: HTTPS 
    Description: Protocol in use by Target Group and LB Listener 

  SubnetA:
    Type: String 
    Description: Subnet for target group 

  SubnetB: 
    Type: String 
    Description: Subnet for target group 

  TargetGroup:
    Type: String
    Default: secnet_challenge-tg 
    Description: Name of the target group 
  
  TargetGroupUnhealthyThreshold:
    Type: String
    Default: 3
    Description: Number of failed checks before TG is considered unhealthy 

  TaskCPU:
    Type: String 
    Default: 512 
    Description: Amount of cpu for the task 

  TaskMemory:
    Type: String 
    Default: 1024
    Description: Amount of memory for the task 

  TaskPort:
    Type: String 
    Default: 443 
    Description: Port number for the container 

  Vpc:
    Type: String
    Description: VPC for target group    

Resources:
  Cluster:
    Type: AWS::ECS::Cluster 
    Properties:
      ClusterName: !Ref ClusterName 
      CapacityProviders: 
        - FARGATE 
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE 
          Weight: 1 

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName 
      RetentionInDays: 14

  Service:
    Type: AWS::ECS::Service 
    Properties:
      Cluster: !Ref Cluster 
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancer:
        - TargetGroupArn: !Ref LoadBalancerTargetGroup 
          ContainerPort: !Ref TaskPort 
          ContainerName: !Ref ContainerName 
      NetworkConfiguration:
        AwsvpcConfiguration: 
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
      TaskDefinition: !Ref TaskDefinition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref TaskExecutionRoleArn
      Family: !Ref FamilyName
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE 
      ContainerDefinitions:
        - Name: !Ref ContainerName 
          LogConfiguration:
            LogDriver: awslogs 
            Options:
              awslogs-region: us-east-1
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: secnet_challenge
            Essential: true
            Image: !Ref ImageRepo
            Cpu: !Ref TaskCPU 
            Memory: !Ref TaskMemory 
            PortMappings:
              - ContainerPort: !Ref TaskPort 
                Protocol: TCP 

  SecurityGroup:
    Type: AWS::ECS::SecurityGroup
    Properties:
      GroupDescription: Allows port 443 for secnet_challenge container 
      SecurityGroupIngress: 
        - IpProtocol: tcp 
          FromPort: !Ref TaskPort 
          ToPort: !Ref TaskPort 
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc 

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer 
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: true 
        - Key: access_logs.s3.enabled
          Value: true
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode 
          Value: defensive
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true 
        - Key: routing.http2.enabled 
          Value: true 
        - Key: waf.fail_open.enabled
          Value: false 
        - Key: access_logs.s3.bucket 
          Value: !Ref LogBucket 
        - Key: access_logs.s3.prefix
          Value: secnet_challenge_lb
      Scheme: internet-facing
      Security_Groups: 
        - !Ref SecurityGroup 
      Subnets:
        - !Ref SubnetA 
        - !Ref SubnetB 
      Type: application

  ServiceListener:
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties:  
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/html
            MessageBody:
              !Join [
                "",
                [
                  "<h1>Almost ...</h1><p>The load balancer service listener at ",
                  !GetAtt LoadBalancer.DNSName,
                  " is operational.  If you are seeing this message then you made a request which cannot be processed.</p>",
                ],
              ]
            StatusCode: 200
      LoadBalancerArn: !Ref Loadbalancer 
      Port: 443
      Protocol: !Ref Protocol 

  ServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule 
    Properties:
      Action:
        - Type: forward 
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values: "/"
      ListenerArn: !Ref ServiceListenerArn
      Priority: 100

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup 
    Properties:
      Port: !Ref TaskPort
      Protocol: !Ref Protocol 
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: false 
        - Key: deregistration_delay.timeout_seconds
          Value: 120 
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests
      TargetType: ip
      UnhealthyThresholdCount: !Ref TargetGroupUnhealthyThreshold
      VpcId: !Ref vpc 
      


